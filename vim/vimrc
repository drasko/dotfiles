" Thanks to Mark Nichols <mark@zanshin.net>

" Forget compatibility with vi. Who cares.
set nocompatible

" load bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

if has('syntax') && !exists('g:syntax_on')
  syntax on
endif

" leaders
:let mapleader = ","
:let maplocalleader = "\\"

" timeouts
set timeout timeoutlen=1000 ttimeoutlen=500

set laststatus=2                  " always show the status line
set cmdheight=2                   " and use a two-line tall status line
set showcmd                       " show the command
set noshowmode                    " don't show the mode, vim-airline will do that for us
set autoindent                    " turns it on
set smartindent                   " does the right thing (mostly) in programs
set linespace=3                   " prefer a slight higher line height
set linebreak                     " wrap intelligently, won't insert hard line breaks
set wrap                          " use line wrapping
set textwidth=79                  " at column 79
set ruler                         " display current cursor position
set showmatch                     " show matching brackets
if exists("&relativenumber")
  set relativenumber              " use relative line numbers
endif
set number                        " except for the current line - absolute number there
set backspace=indent,eol,start    " make backspace behave in a sane manner
set mousehide                     " hide mouse when typing
set foldenable                    " enable code folding
set history=1000
set ffs=unix,mac,dos              " default file types
set autoread                      " automatically update file when editted outside of vim

" Setup automatic text formatting/wrapping (previously: grn1 )
set formatoptions=
set formatoptions-=t              " don't autowrap text
set formatoptions+=c              " do autowrap comments
set formatoptions+=r              " automatically continue comments
set formatoptions+=o              " automatically continue comments when hitting 'o' or 'O'
set formatoptions+=q              " allow formating of comments with 'gq'
set formatoptions+=n              " recognize numbered lists
set formatoptions+=l              " don't break long lines that were already there

" disable arrow keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" use <C>hjkl to switch between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move line(s) up or down via C-j and C-k respectively
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <ESC>:m .+1<CR>==gi
inoremap <C-k> <ESC>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" encoding
set termencoding=utf-8
set encoding=utf-8

" encryption
if exists("&cryptmethod")
  set cryptmethod=blowfish
endif

" What to do with files and focus
set autowrite           " write out old file when switching between files
set autoread            " reload files changed on disk, i.e. via `git checkout`
au FocusLost * :wa      " save file when Vim loses focus
set hidden              " switch beteen buffers without saving

" Disable backups
set nobackup
set noswapfile

" Colorscheme
set background=dark
silent! colorscheme apprentice

" Tabs
set tabstop=4           " 4 spaces for a tab
set shiftwidth=4        " 4 spaces for autoindenting
set softtabstop=4       " when <BS>, pretend a tab is removed even if spaces
set expandtab           " expand tabs to spaces (overloadable by file type)

" Scrolling
set scrolloff=5         " show context above/below cursor line
set sidescrolloff=10    " number of cols from horizontal edge to  start scrolling
set sidescroll=1        " number of cols to scroll at a time

" sudo to write
cmap w!! w !sudo tee % >/dev/null

" toggle listchars on or off
noremap <Leader>i :set list!<CR>

" Paste mode to prevent autoindentation of pasted lines
set pastetoggle=<F2>

" Better pasting from clipboard
" http://tilvim.com/2014/03/18/a-better-paste.html
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

set clipboard=unnamed   " yank and paste with the system clipboard

" show cursorline only in active window
if has("autocmd")
  autocmd WinLeave * set nocursorline
  autocmd WinEnter * set cursorline
endif

" Map escape to jj -- much faster to reach and type
imap jj <esc>

" Searching
set incsearch           " use incremental search
set hlsearch            " highlight search results
set ignorecase          " ignore case when searching
set smartcase           " ignore case if search string is all lower case, case-sensitve otherwise
" remove search highlighting with <F3>
nnoremap <silent> <leader>/ :nohlsearch<CR>

" -------------------------------------------------------------------
" Preserve function: saves search history and cursor position
" call with some command, like removing all whitespace
" -------------------------------------------------------------------
function! Preserve(command)
  " preparation: save last search, and cursor position
  let _s=@/
  let l = line(".")
  let c = col(".")
  " do the business
  execute a:command
  " clean up: restore previous search history and cursor position
  let @/=_s
  call cursor(l,c)
endfunction

" strip whitespace from all lines in file
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" reindent entire file
nmap _= :call Preserve("normal gg=G")<CR>

" Splits
nnoremap <leader>v <C-w>v<C-w>l   " open a vertical split and switch to it (,v)
nnoremap <leader>h <C-w>s<C-w>j   " open a horizontal split and switch to it (,h)

" open vimrc in new tab for editing
nmap <leader>ev :tabedit $MYVIMRC<cr>

" automatically source .vimrc when it is saved (from vimcasts.org #24)
if has("autocmd")
  autocmd! bufwritepost .vimrc source $MYVIMRC
endif

" reload .vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Command line completion
set wildmenu
set wildmode=full

" control whitespace preferences based on filetype
if has("autocmd")
  " enable file type detection
  filetype on

  " prevent Vim from auto-inserting comment on subsequent lines
  " http://tilvim.com/2013/12/30/remove-comment-prefix-2.html
  autocmd FileType * setlocal formatoptions-=r formatoptions-=o

  " syntax of these languages is fussy over tabs Vs spaces
  autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
  autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

  " treat .rss files as XML
  autocmd BufNewFile,BufRead *.rss,*.atom setfiletype xml

  " spell check Git commit messages
  autocmd BufRead COMMIT_EDITMSG setlocal spell spelllang=en_us

  " start commit message in insert mode
  autocmd BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't')

  " markdown files
  autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown setfiletype markdown
  autocmd BufNewFile,BufRead *.md,*.mkd,*.markdown set spell spelllang=en_us
  autocmd FileType markdown setlocal tw=100

  " non ruby files related to Ruby
  autocmd BufNewFile,BufRead Gemfile,Gemfile.lock,Guardfile setfiletype ruby
  autocmd BufNewFile,BufRead Thorfile,config.ru,Vagrantfile setfiletype ruby
  autocmd BufNewFile,BufRead Berksfile,Berksfile.lock setfiletype ruby
  autocmd BufNewFile,BufRead Rakefile setfiletype rake
  autocmd BufNewFile,BufRead Rakefile set syntax=ruby
  autocmd BufNewFile,BufRead *.rake setfiletype rake
  autocmd BufNEwFile,BufRead *.rake set syntax=ruby

  " Chef uses Ruby, and this will enable the Chef snippets
  autocmd FileType ruby,eruby set filetype=ruby.eruby.chef

  " Python files
  let NERDTreeIgnore = ['\.pyc$', '\~$', '\.rbc$']
  autocmd BufNewFile,BufRead *.py set ts=4 sts=4 sw=4 expandtab

endif
